/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}

apply plugin: 'com.android.model.library'

group = groupId

model {
	android {

		// The following are set in the common.gradle file
		compileSdkVersion(compileVersion)
		buildToolsVersion(buildTools)
		defaultConfig {
			minSdkVersion.apiLevel minVersion
			targetSdkVersion.apiLevel targetVersion
			versionCode(releaseVersionCode)
			versionName(versionCodeName)

            buildConfigFields {
                create() {
                    type "int"
                    name "VALUE"
                    value "1"
                }
            }
		}

		// set by command line arguments
		publishNonDefault(gradle.ext.odkPublishConfig.toBoolean())
		defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

		productFlavors {
			create("demo") {
			}

			create("master") {
			}

			create("snapshot") {
			}

			create("uitest") {
			}
		}
    }

    android.buildTypes {
        release {
            minifyEnabled(minify)
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    android.packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    android.compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    // android.variantFilter { variant ->
	    // def names = variant.flavors*.name
        // if(gradle.ext.odkPublishConfig) {
        //    if (names.contains(gradle.ext.odkPublishConfigName)) {
        //        variant.setIgnore(false)
        //    } else {
        //        variant.setIgnore(true)
        //    }
        //}
    // }
}


configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}


dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:support-v4:23.1.0'
    compile 'joda-time:joda-time:2.2'

    // Testing dependencies
    testCompile 'junit:junit:4.12'
}
